package com.example.cm2115;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.example.cm2115.AccountManagerController;
import com.example.cm2115.model.AccountManager;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.*;

import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;

/**
 * The AddCustomerController class manages the interaction between the "Add Customer" view (FXML)
 * and the underlying data models. It handles user input, updates the UI, and communicates with the
 * AccountManager model to add new customers and accounts.
 */
public class AddCustomerController {

    // FXML-annotated UI components
    @FXML
    private RadioButton bus, ind, cha, save, current;
    @FXML
    private ChoiceBox<String> custotypelabel;
    @FXML
    private TextField acctnamelabel;
    @FXML
    private TextField addresstag;
    @FXML
    private TextField customertypelabel;
    @FXML
    private TextField accounttypelabel;

    // Lists to store generated data
    private ArrayList<String> Acctname = new ArrayList<>();
    private List<Integer> sortid = new ArrayList<>();
    private ArrayList<String> addresslist = new ArrayList<>();

    // Stage and Scene variables
    private Stage stage;
    private Scene scene;
    private Parent root;

    // Variables to store user-inputted and generated data
    public String accname;
    public int autoGeneratedID;
    public String Address;
    private String ctype;
    private String acctype;
    public String CID;
    public String SID;
    private int acctNumber;
    private String actno;

    /**
     * Generates a random number within a specified range.
     *
     * @param min The minimum value of the range.
     * @param max The maximum value of the range.
     * @return A randomly generated number within the specified range.
     */
    public static int getRandomNumberInRange(int min, int max) {
        if (min >= max) {
            throw new IllegalArgumentException("Max must be greater than min");
        }

        Random random = new Random();
        return random.nextInt(max - min + 1) + min;
    }

    /**
     * Appends a new string to a string array.
     *
     * @param array        The original string array.
     * @param strToAppend  The string to be appended.
     * @return A new string array with the appended string.
     */
    public static String[] appendString(String[] array, String strToAppend) {
        // Convert the array to a StringBuilder
        StringBuilder stringBuilder = new StringBuilder();
        for (String s : array) {
            stringBuilder.append(s).append(" ");
        }

        // Append the new string
        stringBuilder.append(strToAppend);

        // Convert the StringBuilder back to a string array
        String[] newArray = stringBuilder.toString().split(" ");

        return newArray;
    }

    /**
     * Navigates back to the Account Manager view when the "Back" button is clicked.
     *
     * @param event ActionEvent triggered by the button click.
     * @throws IOException If an I/O error occurs during the navigation process.
     */
    public void Backtoreg(ActionEvent event) throws IOException {
        root = FXMLLoader.load(getClass().getResource("AccountManager.fxml"));
        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Registers a new customer and account when the "Register" button is clicked.
     *
     * @param event ActionEvent triggered by the button click.
     * @throws IOException If an I/O error occurs during the registration process.
     */
    public void reg(ActionEvent event) throws IOException {
        // Retrieve user-inputted data
        accname = acctnamelabel.getText().toLowerCase();
        ctype = customertypelabel.getText();
        acctype = accounttypelabel.getText();

        // Generate random IDs and account number
        acctNumber = getRandomNumberInRange(1, 10000);
        int cid = getRandomNumberInRange(1, 10000);
        int sid = getRandomNumberInRange(1, 10000);

        // Convert generated IDs and account number to strings
        CID = String.valueOf(cid);
        SID = String.valueOf(sid);
        actno = String.valueOf(acctNumber);

        // Retrieve user-inputted address
        Address = addresstag.getText();

        // Paths for CSV files
        String filePath = "src/main/resources/com/example/cm2115/customer.csv";
        String filePath1 = "src/main/resources/com/example/cm2115/account.csv";

        // Example data to write to the CSV file
        List<String[]> customerToWrite = new ArrayList<>();
        List<String[]> accountToWrite = new ArrayList<>();

        // Add customer data to the list
        customerToWrite.add(new String[]{CID, accname, Address, ctype});

        // Add account data to the list
        accountToWrite.add(new String[]{SID, actno, CID, "0", acctype});

        // Call the addcustomer method in AccountManager to update data
        AccountManager.addcustomer(customerToWrite, accountToWrite);

        // Load the Account Manager view and update the stage
        FXMLLoader loader = new FXMLLoader(getClass().getResource("AccountManager.fxml"));
        root = loader.load();

        // Retrieve the controller for Account Manager view
        AccountManagerController scene2Controller = loader.getController();

        // Display the newly added customer in the UI
        scene2Controller.displayCutomers(accname, Address, ctype, actno, "0");

        // Update the stage with the Account Manager view
        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }
}
